#Different methods to get base materials for Density Functional Calculations.
# 1- RCSR = Reticular Chemistry Structure Resource (https://rcsr.anu.edu.au/)
# 2- C2DB = Computational 2D Materials Database (https://cmr.fysik.dtu.dk/c2db/c2db.html)
# 3- From the Lab external drive

###########I am using the materials from the Lab external drive in this project##############

# Step 1: Getting CIF Material.
def retrieve_matereial(material_name, lab_external_drive path, local_storage_path): #function to get CIF file from the specified path
#and save it to the specified filename
    CIF_material = retrieve_matereial_path(material_name, lab_external_drive path, local_storage_path) #Implementation of the path for the materials
    return CIF_material

# Step 2: Convert CIF to d12 Input format
def CIF2D12(CIF_material, structure, path, opt, bassiset, OUTPUT_DIR): #function to convert CIF material to d12 format
    inputfile_d12 = CIF2D12_format(material, structure, path, opt, bassiset, OUTPUT_DIR)   # set a convert_to_d12_format function
    return inputfile_d12

# Step 3: Perform Density Functional Theory (DFT) Calculations (optimization) using CRYSTAL17 software on HPCC
def submitcrystal17_calculations(inputfile_d12): #Implementation for performing DFT calculations for the given input
    DFT_outputs = submitcrystal17_on_HPCC(inputfile_d12)  #implementing the DFT calculation function
    return DFT_outputs

# Step 4: Separate Errored ones from Optimized ones
def updatelist_errored_and_optimized(DFT_outputs): # Implementation to separate errored results from optimized results
    # Initialize lists to store errored and optimized outputs/results
    errored_outputs = []
    optimized_outputs = []
# Define a function to check if a result is errored or uptimized
def is_errored(output):

    # Loop through DFT outputs and separate them based on a condition
    for output in DFT_outputs:
        if is_errored(output):
            errored_outputs.append(output)
        else:
            optimized_outputs.append(output)

    return errored_outputs, optimized_outputs

# Step 5: Convert Optimized Outputs to CIF (only for structural vizualization)
def write_cif(optimized_outputs): # Conversion function of optimized results to CIF format
    CIF_optimized = write_cif_format(optimized_outputs)  # Implementation of the CIF conversion
    return CIF_optimized

# Step 6: Visualization using Relevant Software (e.g., Vesta)
def visualize_optimized_structure(CIF_optimized):
    # Implementation for visualizing the optimized structure using software like Vesta
    visualize_structure(CIF_optimized)  # Implementing the visualization function

# Step 7: Save Optimized Structures (END)
def save_optimized_structures(CIF_optimized):
    # Implementation to save the optimized structures to a storage location
    save_structures(optimized_structure)  # Implementing the saving function

##################### NOTE #########################
# As you suggested in your feedback on my DFD "you may want to focus on either the optimized structure result"
# Therefore, I am thinking about considering the optimized stages as the 1st stage, if it works,
# Then, I will move to the properties calculations.